# shap_23 <- data_23 %>%
#   group_by(Exp) %>%
#   shapiro_test(TC01_AR_surt)
# tab_shap_23 <- data.frame(matrix(unlist(shap_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_shap_23) <- c_shap
# tab_shap_23 <- tab_shap_23 %>%
#   select(-c("shap_AV1", "shap_AV2"))
#
# # adaptations are needed in the next 5 rows for the different tests
# variable1 <- data_e1$TC01_AR_surt
# variable2 <- data_e2$TC01_AR_surt
# variable3 <- data_e3$TC01_AR_surt
# title_12 <- c("L0_surt_12")
# title_23 <- c("L0_surt_23")
# ## define parameters
# m1 <- mean(variable1)
# sd1 <- sd(variable1)
# n1 <- length(variable1)
# m2 <- mean(variable2, na.rm = TRUE)
# sd2 <- sd(variable2, na.rm = TRUE)
# n2 <- length(variable2)
# m3 <- mean(variable3, na.rm = TRUE)
# sd3 <- sd(variable3, na.rm = TRUE)
# n3 <- length(variable3)
# ## calculate TOST
# TOST_12 <- TOSTtwo(m1 = m1, m2 = m2, sd1 = sd1, sd2 = sd2, n1 = n1, n2 = n2, low_eqbound_d = -d, high_eqbound_d = d)
# TOST_23 <- TOSTtwo(m1 = m2, m2 = m3, sd1 = sd2, sd2 = sd3, n1 = n2, n2 = n3, low_eqbound_d = -d, high_eqbound_d = d)
# ## transform results into dataframe
# TOST_tab12 <- data.frame(matrix(unlist(TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# TOST_tab23 <- data.frame(matrix(unlist(TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
#
# # Wilcoxon TOST as alternative #
# d_raw12 = TOST_tab12$X9
# w_TOST_12 <- wilcox_TOST(TC01_AR_surt ~ Exp, data = data_12, low_eqbound = - d_raw12, high_eqbound = d_raw12)
# w_TOST_tab12 <- data.frame(matrix(unlist(w_TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(w_TOST_tab12) <- c_wTOST
# w_TOST_tab12 <- w_TOST_tab12 %>%
#   select(-c(wTOST_hypothesis:wTOST_decision_NHST))
#
# d_raw23 = TOST_tab23$X9
# w_TOST_23 <- wilcox_TOST(TC01_AR_surt ~ Exp, data = data_23, low_eqbound = - d_raw23, high_eqbound = d_raw23)
# w_TOST_tab23 <- data.frame(matrix(unlist(w_TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(w_TOST_tab23) <- c_wTOST
# w_TOST_tab23 <- w_TOST_tab23 %>%
#   select(-c(wTOST_hypothesis:wTOST_decision_NHST))
#
# ## prepare dataframe for accumulation
# TOST_tab12ready <- cbind(title_12, TOST_tab12, tab_lev_12, tab_shap_12, w_TOST_tab12)
# names(TOST_tab12ready) <- c_TOST_tab
# TOST_tab23ready <- cbind(title_23, TOST_tab23, tab_lev_23, tab_shap_23, w_TOST_tab23)
# names(TOST_tab23ready) <- c_TOST_tab
# ## build results table (first test doesnt include "TOST_results_table")
# TOST_results_table <- bind_rows(TOST_results_table, TOST_tab12ready, TOST_tab23ready)
#
#
# #### L2_surt ####
# # levene (homogeneity)
# lev_12 <- leveneTest(TC07_AR_surt ~ Exp, data = data_12)
# tab_lev_12 <- data.frame(matrix(unlist(lev_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_lev_12) <- c_lev
# tab_lev_12 <- tab_lev_12 %>%
#   select(-c("lev_x1", "lev_x2"))
#
# lev_23 <- leveneTest(TC07_AR_surt ~ Exp, data = data_23)
# tab_lev_23 <- data.frame(matrix(unlist(lev_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_lev_23) <- c_lev
# tab_lev_23 <- tab_lev_23 %>%
#   select(-c("lev_x1", "lev_x2"))
#
# # shapiro-wilk (normality)
# shap_12 <- data_12 %>%
#   group_by(Exp) %>%
#   shapiro_test(TC07_AR_surt)
# tab_shap_12 <- data.frame(matrix(unlist(shap_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_shap_12) <- c_shap
# tab_shap_12 <- tab_shap_12 %>%
#   select(-c("shap_AV1", "shap_AV2"))
#
# shap_23 <- data_23 %>%
#   group_by(Exp) %>%
#   shapiro_test(TC07_AR_surt)
# tab_shap_23 <- data.frame(matrix(unlist(shap_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_shap_23) <- c_shap
# tab_shap_23 <- tab_shap_23 %>%
#   select(-c("shap_AV1", "shap_AV2"))
#
# # adaptations are needed in the next 5 rows for the different tests
# variable1 <- data_e1$TC07_AR_surt
# variable2 <- data_e2$TC07_AR_surt
# variable3 <- data_e3$TC07_AR_surt
# title_12 <- c("L2_surt_12")
# title_23 <- c("L2_surt_23")
# ## define parameters
# m1 <- mean(variable1)
# sd1 <- sd(variable1)
# n1 <- length(variable1)
# m2 <- mean(variable2, na.rm = TRUE)
# sd2 <- sd(variable2, na.rm = TRUE)
# n2 <- length(variable2)
# m3 <- mean(variable3, na.rm = TRUE)
# sd3 <- sd(variable3, na.rm = TRUE)
# n3 <- length(variable3)
# ## calculate TOST
# TOST_12 <- TOSTtwo(m1 = m1, m2 = m2, sd1 = sd1, sd2 = sd2, n1 = n1, n2 = n2, low_eqbound_d = -d, high_eqbound_d = d)
# TOST_23 <- TOSTtwo(m1 = m2, m2 = m3, sd1 = sd2, sd2 = sd3, n1 = n2, n2 = n3, low_eqbound_d = -d, high_eqbound_d = d)
# ## transform results into dataframe
# TOST_tab12 <- data.frame(matrix(unlist(TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# TOST_tab23 <- data.frame(matrix(unlist(TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
#
# # Wilcoxon TOST as alternative #
# d_raw12 = TOST_tab12$X9
# w_TOST_12 <- wilcox_TOST(TC07_AR_surt ~ Exp, data = data_12, low_eqbound = - d_raw12, high_eqbound = d_raw12)
# w_TOST_tab12 <- data.frame(matrix(unlist(w_TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(w_TOST_tab12) <- c_wTOST
# w_TOST_tab12 <- w_TOST_tab12 %>%
#   select(-c(wTOST_hypothesis:wTOST_decision_NHST))
#
# d_raw23 = TOST_tab23$X9
# w_TOST_23 <- wilcox_TOST(TC07_AR_surt ~ Exp, data = data_23, low_eqbound = - d_raw23, high_eqbound = d_raw23)
# w_TOST_tab23 <- data.frame(matrix(unlist(w_TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(w_TOST_tab23) <- c_wTOST
# w_TOST_tab23 <- w_TOST_tab23 %>%
#   select(-c(wTOST_hypothesis:wTOST_decision_NHST))
#
# ## prepare dataframe for accumulation
# TOST_tab12ready <- cbind(title_12, TOST_tab12, tab_lev_12, tab_shap_12, w_TOST_tab12)
# names(TOST_tab12ready) <- c_TOST_tab
# TOST_tab23ready <- cbind(title_23, TOST_tab23, tab_lev_23, tab_shap_23, w_TOST_tab23)
# names(TOST_tab23ready) <- c_TOST_tab
# ## build results table (first test doesnt include "TOST_results_table")
# TOST_results_table <- bind_rows(TOST_results_table, TOST_tab12ready, TOST_tab23ready)
#
#
# #### L3_surt ####
# # levene (homogeneity)
# lev_12 <- leveneTest(TC04_AR_surt ~ Exp, data = data_12)
# tab_lev_12 <- data.frame(matrix(unlist(lev_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_lev_12) <- c_lev
# tab_lev_12 <- tab_lev_12 %>%
#   select(-c("lev_x1", "lev_x2"))
#
# lev_23 <- leveneTest(TC04_AR_surt ~ Exp, data = data_23)
# tab_lev_23 <- data.frame(matrix(unlist(lev_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_lev_23) <- c_lev
# tab_lev_23 <- tab_lev_23 %>%
#   select(-c("lev_x1", "lev_x2"))
#
# # shapiro-wilk (normality)
# shap_12 <- data_12 %>%
#   group_by(Exp) %>%
#   shapiro_test(TC04_AR_surt)
# tab_shap_12 <- data.frame(matrix(unlist(shap_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_shap_12) <- c_shap
# tab_shap_12 <- tab_shap_12 %>%
#   select(-c("shap_AV1", "shap_AV2"))
#
# shap_23 <- data_23 %>%
#   group_by(Exp) %>%
#   shapiro_test(TC04_AR_surt)
# tab_shap_23 <- data.frame(matrix(unlist(shap_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(tab_shap_23) <- c_shap
# tab_shap_23 <- tab_shap_23 %>%
#   select(-c("shap_AV1", "shap_AV2"))
#
# # adaptations are needed in the next 5 rows for the different tests
# variable1 <- data_e1$TC04_AR_surt
# variable2 <- data_e2$TC04_AR_surt
# variable3 <- data_e3$TC04_AR_surt
# title_12 <- c("L3_surt_12")
# title_23 <- c("L3_surt_23")
# ## define parameters
# m1 <- mean(variable1)
# sd1 <- sd(variable1)
# n1 <- length(variable1)
# m2 <- mean(variable2, na.rm = TRUE)
# sd2 <- sd(variable2, na.rm = TRUE)
# n2 <- length(variable2)
# m3 <- mean(variable3, na.rm = TRUE)
# sd3 <- sd(variable3, na.rm = TRUE)
# n3 <- length(variable3)
# ## calculate TOST
# TOST_12 <- TOSTtwo(m1 = m1, m2 = m2, sd1 = sd1, sd2 = sd2, n1 = n1, n2 = n2, low_eqbound_d = -d, high_eqbound_d = d)
# TOST_23 <- TOSTtwo(m1 = m2, m2 = m3, sd1 = sd2, sd2 = sd3, n1 = n2, n2 = n3, low_eqbound_d = -d, high_eqbound_d = d)
# ## transform results into dataframe
# TOST_tab12 <- data.frame(matrix(unlist(TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# TOST_tab23 <- data.frame(matrix(unlist(TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
#
# # Wilcoxon TOST as alternative #
# d_raw12 = TOST_tab12$X9
# w_TOST_12 <- wilcox_TOST(TC04_AR_surt ~ Exp, data = data_12, low_eqbound = - d_raw12, high_eqbound = d_raw12)
# w_TOST_tab12 <- data.frame(matrix(unlist(w_TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(w_TOST_tab12) <- c_wTOST
# w_TOST_tab12 <- w_TOST_tab12 %>%
#   select(-c(wTOST_hypothesis:wTOST_decision_NHST))
#
# d_raw23 = TOST_tab23$X9
# w_TOST_23 <- wilcox_TOST(TC04_AR_surt ~ Exp, data = data_23, low_eqbound = - d_raw23, high_eqbound = d_raw23)
# w_TOST_tab23 <- data.frame(matrix(unlist(w_TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# names(w_TOST_tab23) <- c_wTOST
# w_TOST_tab23 <- w_TOST_tab23 %>%
#   select(-c(wTOST_hypothesis:wTOST_decision_NHST))
#
# ## prepare dataframe for accumulation
# TOST_tab12ready <- cbind(title_12, TOST_tab12, tab_lev_12, tab_shap_12, w_TOST_tab12)
# names(TOST_tab12ready) <- c_TOST_tab
# TOST_tab23ready <- cbind(title_23, TOST_tab23, tab_lev_23, tab_shap_23, w_TOST_tab23)
# names(TOST_tab23ready) <- c_TOST_tab
# ## build results table (first test doesnt include "TOST_results_table")
# TOST_results_table <- bind_rows(TOST_results_table, TOST_tab12ready, TOST_tab23ready)
#
#### allLvl_AR_surt ####
# levene (homogeneity)
lev_12 <- leveneTest(allLvl_AR_surt ~ Exp, data = data_12)
tab_lev_12 <- data.frame(matrix(unlist(lev_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_12) <- c_lev
tab_lev_12 <- tab_lev_12 %>%
select(-c("lev_x1", "lev_x2"))
lev_23 <- leveneTest(allLvl_AR_surt ~ Exp, data = data_23)
tab_lev_23 <- data.frame(matrix(unlist(lev_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_23) <- c_lev
tab_lev_23 <- tab_lev_23 %>%
select(-c("lev_x1", "lev_x2"))
# shapiro-wilk (normality)
shap_12 <- data_12 %>%
group_by(Exp) %>%
shapiro_test(allLvl_AR_surt)
tab_shap_12 <- data.frame(matrix(unlist(shap_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_12) <- c_shap
tab_shap_12 <- tab_shap_12 %>%
select(-c("shap_AV1", "shap_AV2"))
shap_23 <- data_23 %>%
group_by(Exp) %>%
shapiro_test(allLvl_AR_surt)
tab_shap_23 <- data.frame(matrix(unlist(shap_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_23) <- c_shap
tab_shap_23 <- tab_shap_23 %>%
select(-c("shap_AV1", "shap_AV2"))
# adaptations are needed in the next 5 rows for the different tests
variable1 <- data_e1$allLvl_AR_surt
variable2 <- data_e2$allLvl_AR_surt
variable3 <- data_e3$allLvl_AR_surt
title_12 <- c("allLvl_AR_surt_12")
title_23 <- c("allLvl_AR_surt_23")
## define parameters
m1 <- mean(variable1)
sd1 <- sd(variable1)
n1 <- length(variable1)
m2 <- mean(variable2, na.rm = TRUE)
sd2 <- sd(variable2, na.rm = TRUE)
n2 <- length(variable2)
m3 <- mean(variable3, na.rm = TRUE)
sd3 <- sd(variable3, na.rm = TRUE)
n3 <- length(variable3)
## calculate TOST
TOST_12 <- TOSTtwo(m1 = m1, m2 = m2, sd1 = sd1, sd2 = sd2, n1 = n1, n2 = n2, low_eqbound_d = -d, high_eqbound_d = d)
TOST_23 <- TOSTtwo(m1 = m2, m2 = m3, sd1 = sd2, sd2 = sd3, n1 = n2, n2 = n3, low_eqbound_d = -d, high_eqbound_d = d)
## transform results into dataframe
TOST_tab12 <- data.frame(matrix(unlist(TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
TOST_tab23 <- data.frame(matrix(unlist(TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# Wilcoxon TOST as alternative #
d_raw12 = TOST_tab12$X9
w_TOST_12 <- wilcox_TOST(allLvl_AR_surt ~ Exp, data = data_12, low_eqbound = - d_raw12, high_eqbound = d_raw12)
w_TOST_tab12 <- data.frame(matrix(unlist(w_TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab12) <- c_wTOST
w_TOST_tab12 <- w_TOST_tab12 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
d_raw23 = TOST_tab23$X9
w_TOST_23 <- wilcox_TOST(allLvl_AR_surt ~ Exp, data = data_23, low_eqbound = - d_raw23, high_eqbound = d_raw23)
w_TOST_tab23 <- data.frame(matrix(unlist(w_TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab23) <- c_wTOST
w_TOST_tab23 <- w_TOST_tab23 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
## prepare dataframe for accumulation
TOST_tab12ready <- cbind(title_12, TOST_tab12, tab_lev_12, tab_shap_12, w_TOST_tab12)
names(TOST_tab12ready) <- c_TOST_tab
TOST_tab23ready <- cbind(title_23, TOST_tab23, tab_lev_23, tab_shap_23, w_TOST_tab23)
names(TOST_tab23ready) <- c_TOST_tab
## build results table (first test doesnt include "TOST_results_table")
TOST_results_table <- bind_rows(TOST_results_table, TOST_tab12ready, TOST_tab23ready)
#### prepare data sets Eye-Tracking for TO ####
data_e1 <- data_all_TO %>%
filter(Exp == 1)
data_e2 <- data_all_TO %>%
filter(Exp == 2)
data_e3 <- data_all_TO %>%
filter(Exp == 3)
data_12 <- data_all_TO %>%
filter(Exp != 3)
data_23 <- data_all_TO %>%
filter(Exp!= 1)
#### GlanceAllocationTime_ic ####
# levene (homogeneity)
lev_12 <- leveneTest(GlanceAllocationTime_ic ~ Exp, data = data_12)
tab_lev_12 <- data.frame(matrix(unlist(lev_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_12) <- c_lev
tab_lev_12 <- tab_lev_12 %>%
select(-c("lev_x1", "lev_x2"))
lev_23 <- leveneTest(GlanceAllocationTime_ic ~ Exp, data = data_23)
tab_lev_23 <- data.frame(matrix(unlist(lev_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_23) <- c_lev
tab_lev_23 <- tab_lev_23 %>%
select(-c("lev_x1", "lev_x2"))
# shapiro-wilk (normality)
shap_12 <- data_12 %>%
group_by(Exp) %>%
shapiro_test(GlanceAllocationTime_ic)
tab_shap_12 <- data.frame(matrix(unlist(shap_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_12) <- c_shap
tab_shap_12 <- tab_shap_12 %>%
select(-c("shap_AV1", "shap_AV2"))
shap_23 <- data_23 %>%
group_by(Exp) %>%
shapiro_test(GlanceAllocationTime_ic)
tab_shap_23 <- data.frame(matrix(unlist(shap_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_23) <- c_shap
tab_shap_23 <- tab_shap_23 %>%
select(-c("shap_AV1", "shap_AV2"))
# adaptations are needed in the next 5 rows for the different tests
variable1 <- data_e1$GlanceAllocationTime_ic
variable2 <- data_e2$GlanceAllocationTime_ic
variable3 <- data_e3$GlanceAllocationTime_ic
title_12 <- c("GlanceAllocationTime_ic_12")
title_23 <- c("GlanceAllocationTime_ic_23")
## define parameters
m1 <- mean(variable1, na.rm = TRUE)
sd1 <- sd(variable1, na.rm = TRUE)
n1 <- length(variable1)
m2 <- mean(variable2, na.rm = TRUE)
sd2 <- sd(variable2, na.rm = TRUE)
n2 <- length(variable2)
m3 <- mean(variable3, na.rm = TRUE)
sd3 <- sd(variable3, na.rm = TRUE)
n3 <- length(variable3)
## calculate TOST
TOST_12 <- TOSTtwo(m1 = m1, m2 = m2, sd1 = sd1, sd2 = sd2, n1 = n1, n2 = n2, low_eqbound_d = -d, high_eqbound_d = d)
TOST_23 <- TOSTtwo(m1 = m2, m2 = m3, sd1 = sd2, sd2 = sd3, n1 = n2, n2 = n3, low_eqbound_d = -d, high_eqbound_d = d)
## transform results into dataframe
TOST_tab12 <- data.frame(matrix(unlist(TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
TOST_tab23 <- data.frame(matrix(unlist(TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# Wilcoxon TOST as alternative #
d_raw12 = TOST_tab12$X9
w_TOST_12 <- wilcox_TOST(GlanceAllocationTime_ic ~ Exp, data = data_12, low_eqbound = - d_raw12, high_eqbound = d_raw12)
w_TOST_tab12 <- data.frame(matrix(unlist(w_TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab12) <- c_wTOST
w_TOST_tab12 <- w_TOST_tab12 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
d_raw23 = TOST_tab23$X9
w_TOST_23 <- wilcox_TOST(GlanceAllocationTime_ic ~ Exp, data = data_23, low_eqbound = - d_raw23, high_eqbound = d_raw23)
w_TOST_tab23 <- data.frame(matrix(unlist(w_TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab23) <- c_wTOST
w_TOST_tab23 <- w_TOST_tab23 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
## prepare dataframe for accumulation
TOST_tab12ready <- cbind(title_12, TOST_tab12, tab_lev_12, tab_shap_12, w_TOST_tab12)
names(TOST_tab12ready) <- c_TOST_tab
TOST_tab23ready <- cbind(title_23, TOST_tab23, tab_lev_23, tab_shap_23, w_TOST_tab23)
names(TOST_tab23ready) <- c_TOST_tab
## build results table (first test doesnt include "TOST_results_table")
TOST_results_table <- bind_rows(TOST_results_table, TOST_tab12ready, TOST_tab23ready)
#### FirstGlanceDuration_ic ####
# levene (homogeneity)
lev_12 <- leveneTest(FirstGlanceDuration_ic ~ Exp, data = data_12)
tab_lev_12 <- data.frame(matrix(unlist(lev_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_12) <- c_lev
tab_lev_12 <- tab_lev_12 %>%
select(-c("lev_x1", "lev_x2"))
lev_23 <- leveneTest(FirstGlanceDuration_ic ~ Exp, data = data_23)
tab_lev_23 <- data.frame(matrix(unlist(lev_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_23) <- c_lev
tab_lev_23 <- tab_lev_23 %>%
select(-c("lev_x1", "lev_x2"))
# shapiro-wilk (normality)
shap_12 <- data_12 %>%
group_by(Exp) %>%
shapiro_test(FirstGlanceDuration_ic)
tab_shap_12 <- data.frame(matrix(unlist(shap_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_12) <- c_shap
tab_shap_12 <- tab_shap_12 %>%
select(-c("shap_AV1", "shap_AV2"))
shap_23 <- data_23 %>%
group_by(Exp) %>%
shapiro_test(FirstGlanceDuration_ic)
tab_shap_23 <- data.frame(matrix(unlist(shap_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_23) <- c_shap
tab_shap_23 <- tab_shap_23 %>%
select(-c("shap_AV1", "shap_AV2"))
# adaptations are needed in the next 5 rows for the different tests
variable1 <- data_e1$FirstGlanceDuration_ic
variable2 <- data_e2$FirstGlanceDuration_ic
variable3 <- data_e3$FirstGlanceDuration_ic
title_12 <- c("FirstGlanceDuration_ic_12")
title_23 <- c("FirstGlanceDuration_ic_23")
## define parameters
m1 <- mean(variable1, na.rm = TRUE)
sd1 <- sd(variable1, na.rm = TRUE)
n1 <- length(variable1)
m2 <- mean(variable2, na.rm = TRUE)
sd2 <- sd(variable2, na.rm = TRUE)
n2 <- length(variable2)
m3 <- mean(variable3, na.rm = TRUE)
sd3 <- sd(variable3, na.rm = TRUE)
n3 <- length(variable3)
## calculate TOST
TOST_12 <- TOSTtwo(m1 = m1, m2 = m2, sd1 = sd1, sd2 = sd2, n1 = n1, n2 = n2, low_eqbound_d = -d, high_eqbound_d = d)
TOST_23 <- TOSTtwo(m1 = m2, m2 = m3, sd1 = sd2, sd2 = sd3, n1 = n2, n2 = n3, low_eqbound_d = -d, high_eqbound_d = d)
## transform results into dataframe
TOST_tab12 <- data.frame(matrix(unlist(TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
TOST_tab23 <- data.frame(matrix(unlist(TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# Wilcoxon TOST as alternative #
d_raw12 = TOST_tab12$X9
w_TOST_12 <- wilcox_TOST(FirstGlanceDuration_ic ~ Exp, data = data_12, low_eqbound = - d_raw12, high_eqbound = d_raw12)
w_TOST_tab12 <- data.frame(matrix(unlist(w_TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab12) <- c_wTOST
w_TOST_tab12 <- w_TOST_tab12 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
d_raw23 = TOST_tab23$X9
w_TOST_23 <- wilcox_TOST(FirstGlanceDuration_ic ~ Exp, data = data_23, low_eqbound = - d_raw23, high_eqbound = d_raw23)
w_TOST_tab23 <- data.frame(matrix(unlist(w_TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab23) <- c_wTOST
w_TOST_tab23 <- w_TOST_tab23 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
## prepare dataframe for accumulation
TOST_tab12ready <- cbind(title_12, TOST_tab12, tab_lev_12, tab_shap_12, w_TOST_tab12)
names(TOST_tab12ready) <- c_TOST_tab
TOST_tab23ready <- cbind(title_23, TOST_tab23, tab_lev_23, tab_shap_23, w_TOST_tab23)
names(TOST_tab23ready) <- c_TOST_tab
## build results table (first test doesnt include "TOST_results_table")
TOST_results_table <- bind_rows(TOST_results_table, TOST_tab12ready, TOST_tab23ready)
################################## ________ DB 12 + 23 ________ ########################################
#### prepare data sets TimeToL0_max25 ####
data_e1 <- data_all_DB %>%
filter(Exp == 1)
data_e2 <- data_all_DB %>%
filter(Exp == 2)
data_e3 <- data_all_DB %>%
filter(Exp == 3)
data_12 <- data_all_DB %>%
filter(Exp != 3)
data_23 <- data_all_DB %>%
filter(Exp!= 1)
#### TimeToL0_max25 ####
# levene (homogeneity)
lev_12 <- leveneTest(TimeToL0_max25 ~ Exp, data = data_12)
tab_lev_12 <- data.frame(matrix(unlist(lev_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_12) <- c_lev
tab_lev_12 <- tab_lev_12 %>%
select(-c("lev_x1", "lev_x2"))
lev_23 <- leveneTest(TimeToL0_max25 ~ Exp, data = data_23)
tab_lev_23 <- data.frame(matrix(unlist(lev_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_lev_23) <- c_lev
tab_lev_23 <- tab_lev_23 %>%
select(-c("lev_x1", "lev_x2"))
# shapiro-wilk (normality)
shap_12 <- data_12 %>%
group_by(Exp) %>%
shapiro_test(TimeToL0_max25)
tab_shap_12 <- data.frame(matrix(unlist(shap_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_12) <- c_shap
tab_shap_12 <- tab_shap_12 %>%
select(-c("shap_AV1", "shap_AV2"))
shap_23 <- data_23 %>%
group_by(Exp) %>%
shapiro_test(TimeToL0_max25)
tab_shap_23 <- data.frame(matrix(unlist(shap_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_shap_23) <- c_shap
tab_shap_23 <- tab_shap_23 %>%
select(-c("shap_AV1", "shap_AV2"))
# adaptations are needed in the next 5 rows for the different tests
variable1 <- data_e1$TimeToL0_max25
variable2 <- data_e2$TimeToL0_max25
variable3 <- data_e3$TimeToL0_max25
title_12 <- c("TimeToL0_max25_12")
title_23 <- c("TimeToL0_max25_23")
## define parameters
m1 <- mean(variable1)
sd1 <- sd(variable1)
n1 <- length(variable1)
m2 <- mean(variable2, na.rm = TRUE)
sd2 <- sd(variable2, na.rm = TRUE)
n2 <- length(variable2)
m3 <- mean(variable3, na.rm = TRUE)
sd3 <- sd(variable3, na.rm = TRUE)
n3 <- length(variable3)
## calculate TOST
TOST_12 <- TOSTtwo(m1 = m1, m2 = m2, sd1 = sd1, sd2 = sd2, n1 = n1, n2 = n2, low_eqbound_d = -d, high_eqbound_d = d)
TOST_23 <- TOSTtwo(m1 = m2, m2 = m3, sd1 = sd2, sd2 = sd3, n1 = n2, n2 = n3, low_eqbound_d = -d, high_eqbound_d = d)
## transform results into dataframe
TOST_tab12 <- data.frame(matrix(unlist(TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
TOST_tab23 <- data.frame(matrix(unlist(TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
# Wilcoxon TOST as alternative #
d_raw12 = TOST_tab12$X9
w_TOST_12 <- wilcox_TOST(TimeToL0_max25 ~ Exp, data = data_12, low_eqbound = - d_raw12, high_eqbound = d_raw12)
w_TOST_tab12 <- data.frame(matrix(unlist(w_TOST_12), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab12) <- c_wTOST
w_TOST_tab12 <- w_TOST_tab12 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
d_raw23 = TOST_tab23$X9
w_TOST_23 <- wilcox_TOST(TimeToL0_max25 ~ Exp, data = data_23, low_eqbound = - d_raw23, high_eqbound = d_raw23)
w_TOST_tab23 <- data.frame(matrix(unlist(w_TOST_23), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(w_TOST_tab23) <- c_wTOST
w_TOST_tab23 <- w_TOST_tab23 %>%
select(-c(wTOST_hypothesis:wTOST_decision_NHST))
## prepare dataframe for accumulation
TOST_tab12ready <- cbind(title_12, TOST_tab12, tab_lev_12, tab_shap_12, w_TOST_tab12)
names(TOST_tab12ready) <- c_TOST_tab
TOST_tab23ready <- cbind(title_23, TOST_tab23, tab_lev_23, tab_shap_23, w_TOST_tab23)
names(TOST_tab23ready) <- c_TOST_tab
## build results table (first test doesnt include "TOST_results_table")
TOST_results_table <- bind_rows(TOST_results_table, TOST_tab12ready, TOST_tab23ready)
################################## ________ save ________ ########################################
write_excel_csv(TOST_results_table, "data/results/TOST_ER,SI,ET,DB.csv")
rm(list=setdiff(ls(), c("TOST_results_table")))
