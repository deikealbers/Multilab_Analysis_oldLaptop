# # N = 201 + 75 = 276
# wilcoxQ4 <- wilcox.test(Q4~Group, data = data, paired = FALSE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
# describeBy(data$Q4, data$Group)
# boxplot(Q4~Group, data=data)
# wilcoxQ4
# rFromWilcox(wilcoxQ4, 276)
#
# # Wilcoxon-Test Q5 ####
# # N = 201 + 75 = 276
# wilcoxQ5 <- wilcox.test(Q5~Group, data = data, paired = FALSE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
# describeBy(data$Q5, data$Group)
# boxplot(Q5~Group, data=data)
# wilcoxQ5
# rFromWilcox(wilcoxQ5, 276)
help wilcox.test()
wilcox.test()
drug<-gl(2, 10, labels = c("Ecstasy", "Alcohol"))
sundayBDI<-c(15, 35, 16, 18, 19, 17, 27, 16, 13, 20, 16, 15, 20, 15, 16, 13,
14, 19, 18, 18)
wedsBDI<-c(28, 35, 35, 24, 39, 32, 27, 29, 36, 35, 5, 6, 30, 8, 9, 7, 6, 17,
3, 10)
drugData<-data.frame(drug, sundayBDI, wedsBDI)
summary(drugData)
newModel<-wilcox.test(outcome ~ predictor, data = dataFrame, paired = FALSE/
TRUE)
sunModel
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData)
drug<-gl(2, 10, labels = c("Ecstasy", "Alcohol"))
sundayBDI<-c(15, 35, 16, 18, 19, 17, 27, 16, 13, 20, 16, 15, 20, 15, 16, 13, 14, 19, 18, 18)
wedsBDI<-c(28, 35, 35, 24, 39, 32, 27, 29, 36, 35, 5, 6, 30, 8, 9, 7, 6, 17, 3, 10)
drugData<-data.frame(drug, sundayBDI, wedsBDI)
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData)
sunModel
wedModel<-wilcox.test(wedsBDI ~ drug, data = drugData)
wedModel
# Load packages ####
library(readxl)
library(psych)
#### set directory ####
setwd("C:/Users/ga84kuj/Documents/")
# Define function for Wilcoxon effect size r ####
rFromWilcox <- function(wilcoxModel, N){
z <- qnorm(wilcoxModel$p.value/2)
r <- z/ sqrt(N)
cat(wilcoxModel$data.name, 'Effect Size, r = ', r)
}
# Import data ####
data_ped <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Pedestrians")
data_dri <- read_excel("R/3D_zebra/Wilcoxon_data.xlsx", sheet = "Drivers")
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE, conf.int = FALSE, correct= FALSE, na.action = na.exclude)
describeBy(data_ped$Pedestrians, data_ped$Cat)
boxplot(Pedestrians~Cat, data=data_ped)
wilcoxPed
rFromWilcox(wilcoxPed, 402)
sunModel<-wilcox.test(sundayBDI ~ drug, data = drugData)
sunModel
wedModel<-wilcox.test(wedsBDI ~ drug, data = drugData)
wedModel
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE)
wilcoxPed
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped, paired = TRUE)
wilcoxPed
# Wilcoxon-Tests ####
wilcoxPed <- wilcox.test(Pedestrians~Cat, data = data_ped)
wilcoxPed
1
pitch = c(233,204,242,130,112,142)
sex = c(rep("female",3),rep("male",3))
my.df = data.frame(sex,pitch)
xmdl = lm(pitch ~ sex, my.df)
summary(xmdl)
age = c(14,23,35,48,52,67)
pitch = c(252,244,240,233,212,204)
my.df = data.frame(age,pitch)
xmdl = lm(pitch ~ age, my.df)
summary(xmdl)
plot(fitted(xmdl),residuals(xmdl))
anova <- aov(data_12$TC01~data_12$Exp*data_12$HMI)
#### preparations ####
rm(list = ls())
library(tidyverse)
library(ggplot2);
library(reshape)
library(lme4)
library(nlme)
setwd("~/R/Multilab_Analysis")
#### import data ####
data_all <- read.csv("data/preprocessed/multilab_subj_complete.csv", encoding = "UTF-8")
# #### with VP ####
# ## adjust data set ##
#
# data_12_VP <- data_all %>%
#   filter(Exp != 3) %>%
#   mutate(Exp = case_when(
#     Exp == 1 ~ "e1",
#     Exp == 2 ~ "e2",
#     Exp == 3 ~ "e3",
#     TRUE ~ as.character(Exp))) %>%
#   mutate(Exp_name = Exp) %>%
#   mutate(VPNr = as.character(VPNr)) %>%
#   unite("VP", Exp_name,VPNr) %>%
#   mutate(Exp = factor(Exp)) %>%
#   mutate(HMI = factor(HMI)) %>%
#   dplyr::select(c(Exp, HMI, VP, ends_with("_ER")))
#
# names(data_12_VP) <- c("Exp", "HMI", "VP", "TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12")
#
# ## restructure for long format
# data_12_VP_l<-melt(data_12_VP, id = c("Exp", "HMI", "VP"), measured = c("TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12"))
# names(data_12_VP_l) <-c("Exp", "HMI", "VP", "TC", "ER_score")
#
# ## models
# model =  lmer(ER_score ~ Exp +  HMI + (1|VP) + (1|TC),
#               data=data_12_VP_l,
#               REML=FALSE)
# summary(model)
#
#
# model = lmer(ER_score ~ Exp +
#                HMI + (1+HMI|VP) +
#                (1+HMI|TC),
#              data=data_12_VP_l,
#              REML=FALSE)
# summary(model)
#
# # politeness.model2 = lmer(frequency ~ attitude + gender +
# #                            (1|subject) + (1|scenario), data=politeness)
# # summary(politeness.model2)
###
model_interceptOnly <- gls(ER_score ~ 1, data = data_12_VP_l, method = "ML")
#### import data ####
data_all <- read.csv("data/preprocessed/multilab_subj_complete.csv", encoding = "UTF-8")
###
model_interceptOnly <- gls(ER_score ~ 1, data = data_12_VP_l, method = "ML")
summary(model_interceptOnly)
#### with VP ####
# ## adjust data set ##
#
# data_12_VP <- data_all %>%
#   filter(Exp != 3) %>%
#   mutate(Exp = case_when(
#     Exp == 1 ~ "e1",
#     Exp == 2 ~ "e2",
#     Exp == 3 ~ "e3",
#     TRUE ~ as.character(Exp))) %>%
#   mutate(Exp_name = Exp) %>%
#   mutate(VPNr = as.character(VPNr)) %>%
#   unite("VP", Exp_name,VPNr) %>%
#   mutate(Exp = factor(Exp)) %>%
#   mutate(HMI = factor(HMI)) %>%
#   dplyr::select(c(Exp, HMI, VP, ends_with("_ER")))
#
# names(data_12_VP) <- c("Exp", "HMI", "VP", "TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12")
#
# ## restructure for long format
# data_12_VP_l<-melt(data_12_VP, id = c("Exp", "HMI", "VP"), measured = c("TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12"))
# names(data_12_VP_l) <-c("Exp", "HMI", "VP", "TC", "ER_score")
#
# ## models
# model =  lmer(ER_score ~ Exp +  HMI + (1|VP) + (1|TC),
#               data=data_12_VP_l,
#               REML=FALSE)
# summary(model)
#
#
# model = lmer(ER_score ~ Exp +
#                HMI + (1+HMI|VP) +
#                (1+HMI|TC),
#              data=data_12_VP_l,
#              REML=FALSE)
# summary(model)
#
# # politeness.model2 = lmer(frequency ~ attitude + gender +
# #                            (1|subject) + (1|scenario), data=politeness)
# # summary(politeness.model2)
# ###
# model_interceptOnly <- gls(ER_score ~ 1, data = data_12_VP_l, method = "ML")
# summary(model_interceptOnly)
#
# ###
# model_randominterceptOnly <-lme(ER_score ~ 1, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptOnly)
#
# anova(model_interceptOnly, model_randominterceptOnly)
#
# ###
# model_randominterceptHMI <-lme(ER_score ~ HMI, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptHMI)
#
# anova(model_randominterceptOnly, model_randominterceptHMI)
#
# ###
# model_randominterceptHMIExp <-lme(ER_score ~ HMI + Exp, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptHMIExp)
#
# anova(model_randominterceptHMI, model_randominterceptHMIExp)
#### sociodemographics gender + age included ####
## adjust data set ##
data_12 <- data_all %>%
filter(Exp != 3) %>%
mutate(Exp = case_when(
Exp == 1 ~ "e1",
Exp == 2 ~ "e2",
Exp == 3 ~ "e3",
TRUE ~ as.character(Exp))) %>%
mutate(Exp = factor(Exp)) %>%
mutate(HMI = factor(HMI)) %>%
dplyr::select(c(Exp, HMI, Alter, Geschlecht, ends_with("_ER")))
names(data_12) <- c("Exp", "HMI", "Alter", "Geschlecht", "TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12")
## restructure for long format
data_12_l<-melt(data_12, id = c("Exp", "HMI", "Alter", "Geschlecht"),
measured = c("TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12"))
names(data_12_l) <-c("Exp", "HMI", "Alter", "Geschlecht", "TC","ER_score")
### max model
model_max = lmer(ER_score ~ Exp * HMI +
(1 + Exp * HMI|TC) +
(1 + Exp * HMI|Alter) +
(1 + Exp * HMI|Geschlecht),
data=data_12_l,
REML=FALSE)
summary(model_max)
rm(list = ls())
library(tidyverse)
library(ggplot2);
setwd("~/R/Multilab_Analysis")
#### import data ####
# Read in files
data_all <- read.csv("data/preprocessed/Lime+AutLvl+UsabQ+shortI+ER_all.csv", encoding = "UTF-8")
data_Q <- data_all %>%
mutate(Exp = factor(Exp)) %>%
mutate(HMI = factor(HMI))
data <- data_Q %>%
dplyr::select(c(Exp, HMI, VPNr, ends_with("_ER"))) %>%
add_column(ER_overall = (.$TC01_ER + .$TC02_ER + .$TC03_ER + .$TC04_ER +
.$TC05_ER + .$TC06_ER + .$TC07_ER + .$TC08_ER +
.$TC09_ER + .$TC10_ER + .$TC11_ER + .$TC12_ER)/12)
#### procedure ####
# 1) Test for requirements
#     - DV is a metric variable --> most of DV are Likert scales, may be treated as metric variables
#     - IV is categorical --> HMI (2 grades) + Exp (2-3 grades)
#     - independence between groups
#     - DV shows normal distribution --> if n>25 not problematic; exp3 and some of other DV need testing
#         --> Shapiro-Wilk test [shapiro.test(anovatest$residuals)]
#              ANOVA is quite robust to small deviations from normality. This means that it is not an issue (from the perspective of
#              the interpretation of the ANOVA results) if a small number of points deviates slightly from the normality,
#              normality tests are sometimes quite conservative, meaning that the null hypothesis of normality may be rejected
#              due to a limited deviation from normality. This is especially the case with large samples as power of the test increases
#              with the sample size.
##     - Homogeneity of variances: Groups are from populations with approximately identical variances of the dependent variable
#         --> Levene's test [leveneTest(DV ~ IV[*IV], data = dataset)]
#### data sets ####
# data_12 is for comparison sim (GER) vs test track (GER)
# data_23 is for comparison test track (GER) vs test track (USA)
data_12 <- data %>%
filter(Exp == '1' | Exp == '2')
data_23 <- data %>%
filter(Exp == '2' | Exp == '3')
#### define  column names of results table
c_lev <- c("lev_Df_group", "lev_Df", "lev_F", "lev_x1", "lev_p", "lev_x2")
c_shap <- c("shap_W", "shap_p" , "method", "data")
c_aov_t2 <- c("eta_sq_Exp", "eta_sq_HMI", "eta_sq_Interaction", "eta_sq_Residuals",
"eta_sq_part_Exp", "eta_sq_part_HMI", "eta_sq_part_Interaction", "eta_sq_part_Residuals",
"SumSq_Exp", "SumSq_HMI", "SumSq_Interaction", "SumSq_Residuals",
"Df_Exp", "Df_HMI", "Df_Interaction", "Df_Residuals",
"MeanSq_Exp", "MeanSq_HMI", "MeanSq_Interaction", "MeanSq_Residuals",
"F_Exp", "F_HMI", "F_Interaction", "F_Residuals",
"p_Exp", "p_HMI", "p_Interaction", "p_Residuals") # used for type II (-> aov_t2) anovas; here default, since main effects are focus of research
#### anova ERo 12 ####
# anova
anova_ERo <- aov(ER_overall ~ Exp * HMI, data = data_12)
sum_anova_ERo <- Anova(anova_ERo, type="II")
tab_aov_ERo <- data.frame(matrix(unlist(EtaSq(anova_ERo, type = 2, anova = TRUE)), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
#### anova ERo 12 ####
# anova
anova_ERo <- aov(ER_overall ~ Exp * HMI, data = data_12)
sum_anova_ERo <- Anova(anova_ERo, type="II")
sum_anova_ERo <- anova(anova_ERo, type="II")
sum_anova_ERo <- anova(anova_ERo, type="II")
#### preparations ####
rm(list = ls())
library(tidyverse)
library(ggplot2);
setwd("~/R/Multilab_Analysis")
data_all <- read.csv("data/preprocessed/Lime+AutLvl+UsabQ+shortI+ER_all.csv", encoding = "UTF-8")
data_Q <- data_all %>%
mutate(Exp = factor(Exp)) %>%
mutate(HMI = factor(HMI))
data <- data_Q %>%
dplyr::select(c(Exp, HMI, VPNr, ends_with("_ER"))) %>%
add_column(ER_overall = (.$TC01_ER + .$TC02_ER + .$TC03_ER + .$TC04_ER +
.$TC05_ER + .$TC06_ER + .$TC07_ER + .$TC08_ER +
.$TC09_ER + .$TC10_ER + .$TC11_ER + .$TC12_ER)/12)
data_12 <- data %>%
filter(Exp == '1' | Exp == '2')
data_23 <- data %>%
filter(Exp == '2' | Exp == '3')
c_lev <- c("lev_Df_group", "lev_Df", "lev_F", "lev_x1", "lev_p", "lev_x2")
c_shap <- c("shap_W", "shap_p" , "method", "data")
c_aov_t2 <- c("eta_sq_Exp", "eta_sq_HMI", "eta_sq_Interaction", "eta_sq_Residuals",
"eta_sq_part_Exp", "eta_sq_part_HMI", "eta_sq_part_Interaction", "eta_sq_part_Residuals",
"SumSq_Exp", "SumSq_HMI", "SumSq_Interaction", "SumSq_Residuals",
"Df_Exp", "Df_HMI", "Df_Interaction", "Df_Residuals",
"MeanSq_Exp", "MeanSq_HMI", "MeanSq_Interaction", "MeanSq_Residuals",
"F_Exp", "F_HMI", "F_Interaction", "F_Residuals",
"p_Exp", "p_HMI", "p_Interaction", "p_Residuals") # used for type II (-> aov_t2) anovas; here default, since main effects are focus of research
#### anova ERo 12 ####
# anova
anova_ERo <- aov(ER_overall ~ Exp * HMI, data = data_12)
sum_anova_ERo <- Anova(anova_ERo, type="II")
sum_anova_ERo <- anova(anova_ERo, type="II")
#### preparations ####
rm(list = ls())
library(tidyverse)
library(car)
library(compute.es);
library(ggplot2);
library(multcomp);
library(pastecs);
library(reshape);
library(WRS);
sum_anova_ERo <- Anova(anova_ERo, type="II")
setwd("~/R/Multilab_Analysis")
#### import data ####
# Read in files
data_all <- read.csv("data/preprocessed/Lime+AutLvl+UsabQ+shortI+ER_all.csv", encoding = "UTF-8")
data_Q <- data_all %>%
mutate(Exp = factor(Exp)) %>%
mutate(HMI = factor(HMI))
data <- data_Q %>%
dplyr::select(c(Exp, HMI, VPNr, ends_with("_ER"))) %>%
add_column(ER_overall = (.$TC01_ER + .$TC02_ER + .$TC03_ER + .$TC04_ER +
.$TC05_ER + .$TC06_ER + .$TC07_ER + .$TC08_ER +
.$TC09_ER + .$TC10_ER + .$TC11_ER + .$TC12_ER)/12)
#### procedure ####
# 1) Test for requirements
#     - DV is a metric variable --> most of DV are Likert scales, may be treated as metric variables
#     - IV is categorical --> HMI (2 grades) + Exp (2-3 grades)
#     - independence between groups
#     - DV shows normal distribution --> if n>25 not problematic; exp3 and some of other DV need testing
#         --> Shapiro-Wilk test [shapiro.test(anovatest$residuals)]
#              ANOVA is quite robust to small deviations from normality. This means that it is not an issue (from the perspective of
#              the interpretation of the ANOVA results) if a small number of points deviates slightly from the normality,
#              normality tests are sometimes quite conservative, meaning that the null hypothesis of normality may be rejected
#              due to a limited deviation from normality. This is especially the case with large samples as power of the test increases
#              with the sample size.
##     - Homogeneity of variances: Groups are from populations with approximately identical variances of the dependent variable
#         --> Levene's test [leveneTest(DV ~ IV[*IV], data = dataset)]
#### data sets ####
# data_12 is for comparison sim (GER) vs test track (GER)
# data_23 is for comparison test track (GER) vs test track (USA)
data_12 <- data %>%
filter(Exp == '1' | Exp == '2')
data_23 <- data %>%
filter(Exp == '2' | Exp == '3')
#### define  column names of results table
c_lev <- c("lev_Df_group", "lev_Df", "lev_F", "lev_x1", "lev_p", "lev_x2")
c_shap <- c("shap_W", "shap_p" , "method", "data")
c_aov_t2 <- c("eta_sq_Exp", "eta_sq_HMI", "eta_sq_Interaction", "eta_sq_Residuals",
"eta_sq_part_Exp", "eta_sq_part_HMI", "eta_sq_part_Interaction", "eta_sq_part_Residuals",
"SumSq_Exp", "SumSq_HMI", "SumSq_Interaction", "SumSq_Residuals",
"Df_Exp", "Df_HMI", "Df_Interaction", "Df_Residuals",
"MeanSq_Exp", "MeanSq_HMI", "MeanSq_Interaction", "MeanSq_Residuals",
"F_Exp", "F_HMI", "F_Interaction", "F_Residuals",
"p_Exp", "p_HMI", "p_Interaction", "p_Residuals")
#### anova ERo 12 ####
# anova
anova_ERo <- aov(ER_overall ~ Exp * HMI, data = data_12)
sum_anova_ERo <- Anova(anova_ERo, type="II")
View(sum_anova_ERo)
tab_aov_ERo <- data.frame(matrix(unlist(EtaSq(anova_ERo, type = 2, anova = TRUE)), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
library(DescTools)
tab_aov_ERo <- data.frame(matrix(unlist(EtaSq(anova_ERo, type = 2, anova = TRUE)), nrow=1, byrow=TRUE),stringsAsFactors=FALSE)
names(tab_aov_ERo) <- c_aov_t2
# shapiro (normality)
anova_ERo_res <- residuals(object = anova_ERo)
qqPlot(anova_ERo$residuals,
id = FALSE # id = FALSE to remove point identification
)
hist(anova_ERo_res)
install.packages("see")
install.packages("performance")
rm(list = ls())
library(tidyverse)
library(ggplot2);
library(reshape)
library(lme4)
library(nlme)
setwd("~/R/Multilab_Analysis")
#### import data ####
data_all <- read.csv("data/preprocessed/multilab_subj_complete.csv", encoding = "UTF-8")
# #### with VP ####
# ## adjust data set ##
#
# data_12_VP <- data_all %>%
#   filter(Exp != 3) %>%
#   mutate(Exp = case_when(
#     Exp == 1 ~ "e1",
#     Exp == 2 ~ "e2",
#     Exp == 3 ~ "e3",
#     TRUE ~ as.character(Exp))) %>%
#   mutate(Exp_name = Exp) %>%
#   mutate(VPNr = as.character(VPNr)) %>%
#   unite("VP", Exp_name,VPNr) %>%
#   mutate(Exp = factor(Exp)) %>%
#   mutate(HMI = factor(HMI)) %>%
#   dplyr::select(c(Exp, HMI, VP, ends_with("_ER")))
#
# names(data_12_VP) <- c("Exp", "HMI", "VP", "TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12")
#
# ## restructure for long format
# data_12_VP_l<-melt(data_12_VP, id = c("Exp", "HMI", "VP"), measured = c("TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12"))
# names(data_12_VP_l) <-c("Exp", "HMI", "VP", "TC", "ER_score")
#
# ## models
# model =  lmer(ER_score ~ Exp +  HMI + (1|VP) + (1|TC),
#               data=data_12_VP_l,
#               REML=FALSE)
# summary(model)
#
#
# model = lmer(ER_score ~ Exp +
#                HMI + (1+HMI|VP) +
#                (1+HMI|TC),
#              data=data_12_VP_l,
#              REML=FALSE)
# summary(model)
#
# # politeness.model2 = lmer(frequency ~ attitude + gender +
# #                            (1|subject) + (1|scenario), data=politeness)
# # summary(politeness.model2)
# ###
# model_interceptOnly <- gls(ER_score ~ 1, data = data_12_VP_l, method = "ML")
# summary(model_interceptOnly)
#
# ###
# model_randominterceptOnly <-lme(ER_score ~ 1, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptOnly)
#
# anova(model_interceptOnly, model_randominterceptOnly)
#
# ###
# model_randominterceptHMI <-lme(ER_score ~ HMI, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptHMI)
#
# anova(model_randominterceptOnly, model_randominterceptHMI)
#
# ###
# model_randominterceptHMIExp <-lme(ER_score ~ HMI + Exp, data = data_12_VP_l, random = ~1|TC, method = "ML")
# summary(model_randominterceptHMIExp)
#
# anova(model_randominterceptHMI, model_randominterceptHMIExp)
#### sociodemographics gender + age included ####
## adjust data set ##
data_12 <- data_all %>%
filter(Exp != 3) %>%
mutate(Exp = case_when(
Exp == 1 ~ "e1",
Exp == 2 ~ "e2",
Exp == 3 ~ "e3",
TRUE ~ as.character(Exp))) %>%
mutate(Exp = factor(Exp)) %>%
mutate(HMI = factor(HMI)) %>%
dplyr::select(c(Exp, HMI, Alter, Geschlecht, ends_with("_ER")))
names(data_12) <- c("Exp", "HMI", "Alter", "Geschlecht", "TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12")
## restructure for long format
data_12_l<-melt(data_12, id = c("Exp", "HMI", "Alter", "Geschlecht"),
measured = c("TC01", "TC02", "TC03", "TC04", "TC05", "TC06" , "TC07", "TC08", "TC09", "TC10", "TC11", "TC12"))
names(data_12_l) <-c("Exp", "HMI", "Alter", "Geschlecht", "TC","ER_score")
### max model
model_max = lmer(ER_score ~ Exp * HMI +
(1 + Exp * HMI|TC) +
(1 + Exp * HMI|Alter) +
(1 + Exp * HMI|Geschlecht),
data=data_12_l,
REML=FALSE)
summary(model_max)
anova(model_max)
### max model
model_max = lmerTest::lmer(ER_score ~ Exp * HMI +
(1 + Exp * HMI|TC) +
(1 + Exp * HMI|Alter) +
(1 + Exp * HMI|Geschlecht),
data=data_12_l,
REML=FALSE)
install.packages("lmerTest")
### max model
model_max = lmerTest::lmer(ER_score ~ Exp * HMI +
(1 + Exp * HMI|TC) +
(1 + Exp * HMI|Alter) +
(1 + Exp * HMI|Geschlecht),
data=data_12_l,
REML=FALSE)
### max model
model_max = lmerTest::lmer(ER_score ~ Exp * HMI +
(1 + Exp * HMI|TC)
data=data_12_l,
### max model
model_max = lmerTest::lmer(ER_score ~ Exp * HMI +
(1 + Exp * HMI|TC),
data=data_12_l,
REML=FALSE)
### max model
model_max = lmerTest::lmer(ER_score ~ Exp * HMI +
(1|TC),
data=data_12_l,
REML=FALSE)
summary(model_max)
model_max
performance::check_model(model_max)
performance::check_model(model_max)
